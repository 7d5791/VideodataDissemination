//
// Generated file, do not edit! Created by nedtool 4.6 from veins/modules/messages/VideoStreamMessage.msg.
//

#ifndef _VIDEOSTREAMMESSAGE_M_H_
#define _VIDEOSTREAMMESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
//#include "INETDefs.h"
#include "veins/modules/messages/VideoStreamWithTrace.h"
#include "veins/base/utils/Coord.h"
#include "veins/modules/messages/WaveShortMessage_m.h"
// }}

/**
 * Class generated from <tt>veins/modules/messages/VideoStreamMessage.msg:33</tt> by nedtool.
 * <pre>
 * packet VideoStreamMessage extends WaveShortMessage
 * {
 *     // RTP header fields
 *     bool Marker;                ///< 1-bit marker (e.g., indicating the last packet of a frame)
 *     uint16_t sequenceNumber;	///< 16-bit packet sequence number
 *     uint32_t timestamp;			///< 32-bit timestamp
 * 
 *     // part of fragmentation unit (FU) header (1 octet) in RTP payload
 *     bool fragmentStart; ///< indicating the start of fragemented NAL units
 *     bool fragmentEnd;   ///< indicating the end of fragemented NAL units
 * 
 *     // fields not defined in RFC 3894
 *     long frameNumber;   ///< display order of the current frame
 *     double frameTime;	///< cumulative display time of the current frame in millisecond
 *     int frameType @enum(FrameType);	///< one of I, P, B and IDR (in case of H.264)
 * }
 * </pre>
 */
class VideoStreamMessage : public ::WaveShortMessage
{
  protected:
    bool Marker_var;
    uint16_t sequenceNumber_var;
    uint32_t timestamp_var;
    bool fragmentStart_var;
    bool fragmentEnd_var;
    long frameNumber_var;
    double frameTime_var;
    int frameType_var;

  private:
    void copy(const VideoStreamMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VideoStreamMessage&);

  public:
    VideoStreamMessage(const char *name=NULL, int kind=0);
    VideoStreamMessage(const VideoStreamMessage& other);
    virtual ~VideoStreamMessage();
    VideoStreamMessage& operator=(const VideoStreamMessage& other);
    virtual VideoStreamMessage *dup() const {return new VideoStreamMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getMarker() const;
    virtual void setMarker(bool Marker);
    virtual uint16_t getSequenceNumber() const;
    virtual void setSequenceNumber(uint16_t sequenceNumber);
    virtual uint32_t getTimestamp() const;
    virtual void setTimestamp(uint32_t timestamp);
    virtual bool getFragmentStart() const;
    virtual void setFragmentStart(bool fragmentStart);
    virtual bool getFragmentEnd() const;
    virtual void setFragmentEnd(bool fragmentEnd);
    virtual long getFrameNumber() const;
    virtual void setFrameNumber(long frameNumber);
    virtual double getFrameTime() const;
    virtual void setFrameTime(double frameTime);
    virtual int getFrameType() const;
    virtual void setFrameType(int frameType);
};

inline void doPacking(cCommBuffer *b, VideoStreamMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, VideoStreamMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef _VIDEOSTREAMMESSAGE_M_H_

